import { Server } from "socket.io";
import { Server as HttpServer } from "http";
import AppDataSource from "./data-source";
import { Message } from "./entities/Message";
import { Chat } from "./entities/Chat";
import { User } from "./entities/User";

// üè∑Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
interface SendMessagePayload {
  chatId: number;
  senderId: number;
  content: string;
  receiverId?: number; // üü¢ –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å
}

// WebSocket-—Å–µ—Ä–≤–µ—Ä
let io: Server | null = null;

/**
 * üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket-—Å–µ—Ä–≤–µ—Ä–∞
 */
export const setupWebSocket = (server: HttpServer): void => {
  io = new Server(server, {
    cors: {
      origin: "*",
      methods: ["GET", "POST"],
    },
  });

  io.on("connection", (socket) => {
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    // üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É
    socket.on("joinChat", (chatId: number) => {
      socket.join(`chat_${chatId}`);
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ${chatId}`);
    });

    // üìå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.on("sendMessage", async (data: SendMessagePayload) => {
      const { chatId, senderId, receiverId, content } = data;

      try {
        const chatRepo = AppDataSource.getRepository(Chat);
        const userRepo = AppDataSource.getRepository(User);
        const messageRepo = AppDataSource.getRepository(Message);

        const chat = await chatRepo.findOne({ where: { chatId: chatId }, relations: ["users"] });
        if (!chat) {
          console.log(`‚ùå –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }

        const sender = await userRepo.findOne({ where: { id: senderId } });
        if (!sender) {
          console.log("‚ùå –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
          return;
        }

        let receiver: User | null = null;
        if (receiverId) {
          receiver = await userRepo.findOne({ where: { id: receiverId } });
          if (!receiver) {
            console.log("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
          }
        }

        const newMessage = new Message();
        newMessage.content = content;
        newMessage.chat = chat;
        newMessage.sender = sender;
        if (receiver) newMessage.receiver = receiver;

        await messageRepo.save(newMessage);

        // üìå –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
        io?.to(`chat_${chatId}`).emit("receiveMessage", newMessage);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });

    socket.on("disconnect", () => {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    });
  });
};

/**
 * üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
 */
export const sendMessageToChatWithSocket = (chatId: number, message: Message): void => {
  if (!io) {
    console.error("‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
    return;
  }
  io.to(`chat_${chatId}`).emit("newMessage", message);
};
