import { Request, Response } from "express";
import AppDataSource from "../data-source";
import { Chat } from "../entities/Chat";
import { User } from "../entities/User";
import { Message } from "../entities/Message";
import { In } from "typeorm";
import { io } from "../websocket";

interface AuthRequest extends Request {
  user?: { id: number };
}

export const getUserChatsWithLastMessages = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  const userId = req.user?.id;

  if (!userId) {
    res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    return;
  }

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
    const chats = await AppDataSource.getRepository(Chat)
      .createQueryBuilder("chat")
      .innerJoin("chat.users", "user") // —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      .leftJoinAndSelect("chat.users", "allUsers") // –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Ç–∞
      .where("user.id = :userId", { userId })
      .getMany();

    if (!chats.length) {
      res.json([]);
      return;
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
    const subQuery = AppDataSource.getRepository(Message)
      .createQueryBuilder("sub")
      .select("DISTINCT ON (sub.chatId) sub.id", "id")
      .addSelect("sub.chatId", "chatId")
      .orderBy("sub.chatId")
      .addOrderBy("sub.createdAt", "DESC");

    const lastMessagesRaw = await AppDataSource.getRepository(Message)
      .createQueryBuilder("message")
      .innerJoin(
        "(" + subQuery.getQuery() + ")",
        "latest",
        "message.id = latest.id"
      )
      .leftJoinAndSelect("message.sender", "sender")
      .setParameters(subQuery.getParameters())
      .getMany();

    // 3. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const formattedChats = chats.map((chat) => {
      const lastMessage = lastMessagesRaw.find(
        (msg) => msg.chat?.chatId === chat.chatId
      );

      return {
        chatId: chat.chatId,
        users: chat.users.map(({ id, name, email, avatar }) => ({
          id,
          name,
          email,
          avatar,
        })),
        lastMessage: lastMessage?.content || null,
        lastMessageTime: lastMessage?.createdAt || null,
        sender: lastMessage?.sender || null,
      };
    });

    res.json(formattedChats);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

export const createChat = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    let { userIds }: { userIds: number[] } = req.body;
    const currentUserId = req.user?.id;

    if (!currentUserId) {
      res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
      return;
    }

    if (!Array.isArray(userIds) || userIds.length < 1) {
      res
        .status(400)
        .json({ message: "–ß–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
      return;
    }

    if (!userIds.includes(currentUserId)) {
      userIds.push(currentUserId);
    }

    const userRepo = AppDataSource.getRepository(User);
    const users = await userRepo.find({
      select: ["id", "name", "email", "avatar", "bio", "role"],
      where: { id: In(userIds) },
    });

    if (users.length !== userIds.length) {
      res
        .status(404)
        .json({ message: "–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      return;
    }

    const chatRepo = AppDataSource.getRepository(Chat);
    const existingChat = await chatRepo
      .createQueryBuilder("chat")
      .innerJoin("chat.users", "user")
      .where("user.id IN (:...userIds)", { userIds })
      .groupBy("chat.chatId")
      .having("COUNT(user.id) = :count", { count: userIds.length })
      .getOne();

    if (existingChat) {
      // res.json(existingChat);
      return;
    }

    const newChat = chatRepo.create({ users });
    await chatRepo.save(newChat);

    res.status(201).json(newChat);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

export const deleteChat = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  const chatId = Number(req.params.chatId);

  if (!req.user) {
    res.status(401).json({ message: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    return;
  }

  try {
    const chatRepository = AppDataSource.getRepository(Chat);

    const chat = await chatRepository.findOne({
      where: { chatId: chatId },
      relations: ["users"],
    });

    if (!chat) {
      res.status(404).json({ message: "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const isParticipant = chat.users.some((user) => user.id === req.user!.id);

    if (!isParticipant) {
      res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É" });
      return;
    }

    await chatRepository.remove(chat);

    res.status(200).json({ message: "–ß–∞—Ç —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞" });
  }
};

export const getUserChats = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;

    if (!userId) {
      res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
      return;
    }

    const chats = await AppDataSource.getRepository(Chat).find({
      where: { users: { id: userId } },
      relations: ["users", "messages"],
    });

    res.json(chats);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

export const updateChatUsers = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  if (!req.user) {
    res.status(401).json({ message: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    return;
  }

  const chatId = parseInt(req.params.chatId);
  const { userIds } = req.body;

  if (isNaN(chatId)) {
    res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π chatId" });
    return;
  }

  if (!Array.isArray(userIds) || userIds.length === 0) {
    res.status(400).json({ message: "userIds –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º" });
    return;
  }

  try {
    const chatRepo = AppDataSource.getRepository(Chat);
    const userRepo = AppDataSource.getRepository(User);

    const chat = await chatRepo.findOne({
      where: { chatId },
      relations: ["users"],
    });

    if (!chat) {
      res.status(404).json({ message: "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —á–∞—Ç
    const isParticipant = chat.users.some((u) => u.id === req.user!.id);
    if (!isParticipant) {
      res.status(403).json({ message: "–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞" });
      return;
    }

    const users = await userRepo.find({ where: { id: In(userIds) } });

    if (users.length !== userIds.length) {
      res.status(404).json({ message: "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      return;
    }

    chat.users = users;
    const updatedChat = await chatRepo.save(chat);

    io?.to(String(chatId)).emit("chat:updated", updatedChat);
    res.json(updatedChat);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
